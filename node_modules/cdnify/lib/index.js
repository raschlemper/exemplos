(function() {
  var cheerio, defaults, fs, path, _;

  cheerio = require('cheerio');

  path = require('path');

  _ = require('lodash');

  fs = require('fs');

  defaults = require('./defaults');

  exports.process = function(rawHtml, options, callback) {
    var $, err, selector;
    _.defaults(options, defaults);
    if (_.isString(options.incompatible)) {
      options.incompatible = [options.incompatible];
    }
    selector = "[" + options.cdnAttr + "]";
    $ = cheerio.load(rawHtml, {
      decodeEntities: false
    });
    err = null;
    $(selector).each(function() {
      var $this, invalid, srcAttr;
      $this = $(this);
      if (invalid = _.find(options.incompatible, function(t) {
        return $this.attr(t) != null;
      })) {
        err = {
          message: "cdn attribute cannot be used with " + invalid
        };
      }
      if (!options.useLocal) {
        srcAttr = this.name === 'script' ? 'src' : 'href';
        $this.attr(srcAttr, $this.attr(options.cdnAttr));
        $(this).attr(options.cdnAttr, null);
      }
      return $(this).attr(options.cdnAttr, null);
    });
    return callback(err, $.html(), $);
  };

  exports.processFile = function(filepath, options, callback) {
    return fs.readFile(filepath, 'utf8', function(err, rawHtml) {
      if (err) {
        return callback(err);
      }
      return exports.process(rawHtml, options, function(err, html, $) {
        if (err) {
          return callback(err);
        }
        if (!options.output) {
          return callback(err, html, $);
        }
        return fs.writeFile(options.output, html, function(err) {
          return callback(err, html, $);
        });
      });
    });
  };

}).call(this);
